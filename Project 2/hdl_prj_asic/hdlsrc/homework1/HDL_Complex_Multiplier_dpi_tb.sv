// -------------------------------------------------------------
// 
// File Name: hdl_prj_asic\hdlsrc\homework1\HDL_Complex_Multiplier_dpi_tb.sv
// Created: 2021-02-20 12:46:58
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 5e-08
// Target subsystem base rate: 5e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        5e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        5e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_Complex_Multiplier_dpi_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_Complex_Multiplier_dpi_tb;

  logic clk;
  logic reset;
  logic enb;
  logic const_true;
  logic snkDone;
  logic const_false;
  logic dutEnable;
  logic signed [63:0] dpi_1;  /* sfix64 */
  logic [63:0] dpi_1_temp;  /* ufix64 */
  logic signed [63:0] In1;  /* sfix64 */
  logic signed [63:0] dpi_2;  /* sfix64 */
  logic [63:0] dpi_2_temp;  /* ufix64 */
  logic signed [63:0] In2;  /* sfix64 */
  logic [7:0] dpi_3;  /* ufix8 */
  logic [2:0] dpi_3_temp;  /* ufix3 */
  logic [2:0] In3;  /* ufix3 */
  logic signed [63:0] Out1;  /* sfix64 */
  logic ce_out;
  logic dpiReset;
  logic dpiEnable;
  logic dpiEnbDelay;
  logic signed [63:0] dpi_4;  /* sfix64 */
  logic [63:0] dpi_4_temp;  /* ufix64 */
  logic signed [63:0] Out1_ref;  /* sfix64 */
  logic Out1_testFailure;
  logic isTestFailed;
  logic rdEnb;


  assign const_true = 1'b1;



  assign #550 snkDone = const_true;

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (30);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  assign const_false = 1'b0;



  assign enb = (reset == 1'b0 ? const_true :
              const_false);



  // Delay inside enable generation: register depth 
  always @(posedge clk)
    begin : dut_enable_delay
      if (reset) begin
        dutEnable <= 0;
      end
      else begin
        dutEnable <= enb;
      end
    end

  assign dpi_1_temp = dpi_1;



  assign In1 = dpi_1_temp;



  assign dpi_2_temp = dpi_2;



  assign In2 = dpi_2_temp;



  assign dpi_3_temp = dpi_3[2:0];



  HDL_Complex_Multiplier u_HDL_Complex_Multiplier (.In1(In1),  /* sfix64 */
                                                   .In2(In2),  /* sfix64 */
                                                   .In3(In3),  /* ufix3 */
                                                   .clk(clk),
                                                   .reset(reset),
                                                   .clk_enable(dutEnable),
                                                   .Out1(Out1),  /* sfix64 */
                                                   .ce_out(ce_out)
                                                   );

  initial
    begin : dpiReset_gen
      dpiReset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      dpiReset <= 1'b0;
    end

  assign dpiEnable = (dpiReset == 1'b0 ? const_true :
              const_false);



  // Delay inside enable generation: register depth 
  always @(posedge clk)
    begin : dut_enable_delay_1
      if (dpiReset) begin
        dpiEnbDelay <= 0;
      end
      else begin
        dpiEnbDelay <= dpiEnable;
      end
    end

  gm_homework1_ref_dpi #(.loop_factor(1),
                         .overclocking_factor(1)
                         )
                       u_gm_homework1_ref_dpi (.clk(clk),
                                               .reset(dpiReset),
                                               .clk_enable(dpiEnbDelay),
                                               .dpi_1(dpi_1),  /* sfix64 */
                                               .dpi_2(dpi_2),  /* sfix64 */
                                               .dpi_3(dpi_3),  /* ufix8 */
                                               .dpi_4(dpi_4)  /* sfix64 */
                                               );

  assign dpi_4_temp = dpi_4;



  assign Out1_ref = dpi_4_temp;



  always @(posedge clk)
    begin : Out1_checker
      if (reset == 1'b1) begin
        Out1_testFailure <= 1'b0;
      end
      else begin
        if (dutEnable == 1'b1 && Out1 !== Out1_ref) begin
          Out1_testFailure <= 1'b1;
          $display("ERROR in Out1 at time %t : Expected '%h' Actual '%h'", $time, Out1_ref, Out1);
        end
      end
    end

  assign isTestFailed = Out1_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (isTestFailed == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

  assign In3 = dpi_3_temp;

endmodule  // HDL_Complex_Multiplier_dpi_tb

