// -------------------------------------------------------------
// 
// File Name: hdl_prj_asic\hdlsrc\homework1\HDL_Complex_Multiplier.v
// Created: 2021-02-20 12:46:37
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 5e-08
// Target subsystem base rate: 5e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        5e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        5e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_Complex_Multiplier
// Source Path: homework1/HDL_Complex_Multiplier
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_Complex_Multiplier
          (clk,
           reset,
           clk_enable,
           In1,
           In2,
           In3,
           ce_out,
           Out1);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [63:0] In1;  // sfix64
  input   signed [63:0] In2;  // sfix64
  input   [2:0] In3;  // ufix3
  output  ce_out;
  output  signed [63:0] Out1;  // sfix64


  wire enb;
  reg [2:0] Delay2_out1;  // ufix3
  wire [1:0] Bit_Slice_out1;  // ufix2
  wire Bit_Slice1_out1;  // ufix1
  reg signed [63:0] Delay_out1;  // sfix64
  wire signed [63:0] Bitwise_Operator2_out1;  // sfix64
  wire signed [63:0] Multiport_Switch_out1;  // sfix64
  reg signed [63:0] Delay1_out1;  // sfix64
  wire signed [63:0] Bitwise_Operator_out1;  // sfix64
  wire signed [63:0] Bitwise_Operator1_out1;  // sfix64
  wire signed [64:0] Add_add_temp;  // sfix65
  wire signed [64:0] Add_add_temp_1;  // sfix65
  wire signed [64:0] Add_1;  // sfix65
  wire signed [64:0] Add_2;  // sfix65
  wire signed [64:0] Add_3;  // sfix65
  wire signed [63:0] Add_out1;  // sfix64
  wire [63:0] Constant_out1;  // ufix64
  wire Bit_Slice2_out1;  // ufix1
  wire [64:0] Bit_Concat_out1;  // ufix65
  wire signed [63:0] Bit_Concat_out1_dtc;  // sfix64
  wire signed [63:0] Multiport_Switch1_out1;  // sfix64
  reg signed [63:0] Delay3_out1;  // sfix64


  assign enb = clk_enable;

  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= In3;
        end
      end
    end


  assign Bit_Slice_out1 = Delay2_out1[1:0];


  assign Bit_Slice1_out1 = Delay2_out1[2];


  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1 <= In2;
        end
      end
    end


  assign Bitwise_Operator2_out1 =  ~ Delay_out1;


  assign Multiport_Switch_out1 = (Bit_Slice1_out1 == 1'b0 ? Delay_out1 :
              Bitwise_Operator2_out1);


  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= In1;
        end
      end
    end


  assign Bitwise_Operator_out1 = Multiport_Switch_out1 & Delay1_out1;


  assign Bitwise_Operator1_out1 = Multiport_Switch_out1 | Delay1_out1;


  assign Add_1 = {Multiport_Switch_out1[63], Multiport_Switch_out1};
  assign Add_2 = {Delay1_out1[63], Delay1_out1};
  assign Add_add_temp = Add_1 + Add_2;
  assign Add_3 = {64'b0, Bit_Slice1_out1};
  assign Add_add_temp_1 = Add_add_temp + Add_3;
  assign Add_out1 = Add_add_temp_1[63:0];


  assign Constant_out1 = 64'h0000000000000000;


  assign Bit_Slice2_out1 = Add_out1[62];


  assign Bit_Concat_out1 = {Constant_out1, Bit_Slice2_out1};


  assign Bit_Concat_out1_dtc = $signed(Bit_Concat_out1[63:0]);



  assign Multiport_Switch1_out1 = (Bit_Slice_out1 == 2'b00 ? Bitwise_Operator_out1 :
              (Bit_Slice_out1 == 2'b01 ? Bitwise_Operator1_out1 :
              (Bit_Slice_out1 == 2'b10 ? Add_out1 :
              Bit_Concat_out1_dtc)));


  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 64'sh0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Multiport_Switch1_out1;
        end
      end
    end


  assign Out1 = Delay3_out1;

  assign ce_out = clk_enable;

endmodule  // HDL_Complex_Multiplier

