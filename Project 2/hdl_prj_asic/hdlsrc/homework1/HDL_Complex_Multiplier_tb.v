// -------------------------------------------------------------
// 
// File Name: hdl_prj_asic\hdlsrc\homework1\HDL_Complex_Multiplier_tb.v
// Created: 2021-02-20 12:47:00
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 5e-08
// Target subsystem base rate: 5e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        5e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        5e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_Complex_Multiplier_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_Complex_Multiplier_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire Out1_done;  // ufix1
  wire rdEnb;
  wire Out1_done_enb;  // ufix1
  reg [5:0] Out1_addr;  // ufix6
  wire Out1_active;  // ufix1
  reg [5:0] From_Workspace_out1_addr;  // ufix6
  wire [5:0] From_Workspace2_out1_addr_delay_1;  // ufix6
  reg  tb_enb_delay;
  reg signed [31:0] fp_In3;  // sfix32
  reg [2:0] rawData_In3;  // ufix3
  reg signed [31:0] status_In3;  // sfix32
  reg [2:0] holdData_In3;  // ufix3
  reg [2:0] In3_offset;  // ufix3
  wire [2:0] In3;  // ufix3
  wire [5:0] From_Workspace1_out1_addr_delay_1;  // ufix6
  reg signed [31:0] fp_In2;  // sfix32
  reg signed [63:0] rawData_In2;  // sfix64
  reg signed [31:0] status_In2;  // sfix32
  reg signed [63:0] holdData_In2;  // sfix64
  reg signed [63:0] In2_offset;  // sfix64
  wire signed [63:0] In2;  // sfix64
  wire From_Workspace_out1_active;  // ufix1
  wire From_Workspace_out1_enb;  // ufix1
  wire [5:0] From_Workspace_out1_addr_delay_1;  // ufix6
  reg signed [31:0] fp_In1;  // sfix32
  reg signed [63:0] rawData_In1;  // sfix64
  reg signed [31:0] status_In1;  // sfix32
  reg signed [63:0] holdData_In1;  // sfix64
  reg signed [63:0] In1_offset;  // sfix64
  wire signed [63:0] In1;  // sfix64
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire ce_out;
  wire signed [63:0] Out1;  // sfix64
  wire Out1_enb;  // ufix1
  wire Out1_lastAddr;  // ufix1
  wire [5:0] Out1_addr_delay_1;  // ufix6
  reg signed [31:0] fp_Out1_expected;  // sfix32
  reg signed [63:0] Out1_expected;  // sfix64
  reg signed [31:0] status_Out1_expected;  // sfix32
  wire signed [63:0] Out1_ref;  // sfix64
  reg  Out1_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign Out1_done_enb = Out1_done & rdEnb;



  assign Out1_active = Out1_addr != 6'b110101;



  assign #1 From_Workspace2_out1_addr_delay_1 = From_Workspace_out1_addr;

  // Data source for In3
  initial
    begin : In3_fileread
      fp_In3 = $fopen("In3.dat", "r");
      status_In3 = $rewind(fp_In3);
    end

  always @(From_Workspace2_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_In3 <= 3'bx;
      end
      else if (rdEnb == 1) begin
        status_In3 = $fscanf(fp_In3, "%h", rawData_In3);
      end
    end

  // holdData reg for From_Workspace2_out1
  always @(posedge clk)
    begin : stimuli_From_Workspace2_out1
      if (reset) begin
        holdData_In3 <= 3'bx;
      end
      else begin
        holdData_In3 <= rawData_In3;
      end
    end

  always @(rawData_In3 or rdEnb)
    begin : stimuli_From_Workspace2_out1_1
      if (rdEnb == 1'b0) begin
        In3_offset <= holdData_In3;
      end
      else begin
        In3_offset <= rawData_In3;
      end
    end

  assign #2 In3 = In3_offset;

  assign #1 From_Workspace1_out1_addr_delay_1 = From_Workspace_out1_addr;

  // Data source for In2
  initial
    begin : In2_fileread
      fp_In2 = $fopen("In2.dat", "r");
      status_In2 = $rewind(fp_In2);
    end

  always @(From_Workspace1_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_In2 <= 64'bx;
      end
      else if (rdEnb == 1) begin
        status_In2 = $fscanf(fp_In2, "%h", rawData_In2);
      end
    end

  // holdData reg for From_Workspace1_out1
  always @(posedge clk)
    begin : stimuli_From_Workspace1_out1
      if (reset) begin
        holdData_In2 <= 64'bx;
      end
      else begin
        holdData_In2 <= rawData_In2;
      end
    end

  always @(rawData_In2 or rdEnb)
    begin : stimuli_From_Workspace1_out1_1
      if (rdEnb == 1'b0) begin
        In2_offset <= holdData_In2;
      end
      else begin
        In2_offset <= rawData_In2;
      end
    end

  assign #2 In2 = In2_offset;

  assign From_Workspace_out1_active = From_Workspace_out1_addr != 6'b110101;



  assign From_Workspace_out1_enb = From_Workspace_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 53
  always @(posedge clk)
    begin : FromWorkspace_process
      if (reset == 1'b1) begin
        From_Workspace_out1_addr <= 6'b000000;
      end
      else begin
        if (From_Workspace_out1_enb) begin
          if (From_Workspace_out1_addr >= 6'b110101) begin
            From_Workspace_out1_addr <= 6'b000000;
          end
          else begin
            From_Workspace_out1_addr <= From_Workspace_out1_addr + 6'b000001;
          end
        end
      end
    end



  assign #1 From_Workspace_out1_addr_delay_1 = From_Workspace_out1_addr;

  // Data source for In1
  initial
    begin : In1_fileread
      fp_In1 = $fopen("In1.dat", "r");
      status_In1 = $rewind(fp_In1);
    end

  always @(From_Workspace_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_In1 <= 64'bx;
      end
      else if (rdEnb == 1) begin
        status_In1 = $fscanf(fp_In1, "%h", rawData_In1);
      end
    end

  // holdData reg for From_Workspace_out1
  always @(posedge clk)
    begin : stimuli_From_Workspace_out1
      if (reset) begin
        holdData_In1 <= 64'bx;
      end
      else begin
        holdData_In1 <= rawData_In1;
      end
    end

  always @(rawData_In1 or rdEnb)
    begin : stimuli_From_Workspace_out1_1
      if (rdEnb == 1'b0) begin
        In1_offset <= holdData_In1;
      end
      else begin
        In1_offset <= rawData_In1;
      end
    end

  assign #2 In1 = In1_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  HDL_Complex_Multiplier u_HDL_Complex_Multiplier (.clk(clk),
                                                   .reset(reset),
                                                   .clk_enable(clk_enable),
                                                   .In1(In1),  // sfix64
                                                   .In2(In2),  // sfix64
                                                   .In3(In3),  // ufix3
                                                   .ce_out(ce_out),
                                                   .Out1(Out1)  // sfix64
                                                   );

  assign Out1_enb = ce_out & Out1_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 53
  always @(posedge clk)
    begin : c_2_process
      if (reset == 1'b1) begin
        Out1_addr <= 6'b000000;
      end
      else begin
        if (Out1_enb) begin
          if (Out1_addr >= 6'b110101) begin
            Out1_addr <= 6'b000000;
          end
          else begin
            Out1_addr <= Out1_addr + 6'b000001;
          end
        end
      end
    end



  assign Out1_lastAddr = Out1_addr >= 6'b110101;



  assign Out1_done = Out1_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Out1_done_enb) begin
          check1_done <= Out1_done;
        end
      end
    end

  assign #1 Out1_addr_delay_1 = Out1_addr;

  // Data source for Out1_expected
  initial
    begin : Out1_expected_fileread
      fp_Out1_expected = $fopen("Out1_expected.dat", "r");
      status_Out1_expected = $rewind(fp_Out1_expected);
    end

  always @(Out1_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out1_expected <= 64'bx;
      end
      else if (ce_out == 1) begin
        status_Out1_expected = $fscanf(fp_Out1_expected, "%h", Out1_expected);
      end
    end

  assign Out1_ref = Out1_expected;

  always @(posedge clk)
    begin : Out1_checker
      if (reset == 1'b1) begin
        Out1_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Out1 !== Out1_ref) begin
          Out1_testFailure <= 1'b1;
          $display("ERROR in Out1 at time %t : Expected '%h' Actual '%h'", $time, Out1_ref, Out1);
        end
      end
    end

  assign testFailure = Out1_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // HDL_Complex_Multiplier_tb

