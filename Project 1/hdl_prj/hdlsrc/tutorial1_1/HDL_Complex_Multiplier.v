// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\tutorial1_1\HDL_Complex_Multiplier.v
// Created: 2021-02-02 16:17:26
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1e-06
// Target subsystem base rate: 1e-06
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1e-06
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1_re                       ce_out        1e-06
// Out1_im                       ce_out        1e-06
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_Complex_Multiplier
// Source Path: tutorial1_1/HDL_Complex_Multiplier
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_Complex_Multiplier
          (clk,
           reset,
           clk_enable,
           In1_re,
           In1_im,
           In2_re,
           In2_im,
           ce_out,
           Out1_re,
           Out1_im);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [11:0] In1_re;  // sfix12_En8
  input   signed [11:0] In1_im;  // sfix12_En8
  input   signed [11:0] In2_re;  // sfix12_En8
  input   signed [11:0] In2_im;  // sfix12_En8
  output  ce_out;
  output  signed [24:0] Out1_re;  // sfix25_En16
  output  signed [24:0] Out1_im;  // sfix25_En16


  wire enb;
  reg signed [11:0] Delay_out1_re;  // sfix12_En8
  reg signed [11:0] Delay_out1_im;  // sfix12_En8
  reg signed [11:0] Complex_to_Real_Imag_out1;  // sfix12_En8
  reg signed [11:0] Delay1_out1_re;  // sfix12_En8
  reg signed [11:0] Delay1_out1_im;  // sfix12_En8
  reg signed [11:0] Complex_to_Real_Imag1_out1;  // sfix12_En8
  wire signed [23:0] Product1_out1;  // sfix24_En16
  reg signed [23:0] Product1_out1_1;  // sfix24_En16
  reg signed [11:0] Complex_to_Real_Imag_out2;  // sfix12_En8
  reg signed [11:0] Complex_to_Real_Imag1_out2;  // sfix12_En8
  wire signed [23:0] Product_out1;  // sfix24_En16
  reg signed [23:0] Product_out1_1;  // sfix24_En16
  wire signed [24:0] Add_sub_cast;  // sfix25_En16
  wire signed [24:0] Add_sub_cast_1;  // sfix25_En16
  wire signed [24:0] Add_out1;  // sfix25_En16
  reg signed [24:0] Delay9_out1;  // sfix25_En16
  wire signed [23:0] Product2_out1;  // sfix24_En16
  reg signed [23:0] Product2_out1_1;  // sfix24_En16
  wire signed [23:0] Product3_out1;  // sfix24_En16
  reg signed [23:0] Product3_out1_1;  // sfix24_En16
  wire signed [24:0] Add1_add_cast;  // sfix25_En16
  wire signed [24:0] Add1_add_cast_1;  // sfix25_En16
  wire signed [24:0] Add1_out1;  // sfix25_En16
  reg signed [24:0] Delay8_out1;  // sfix25_En16
  reg signed [24:0] Delay5_out1_re;  // sfix25_En16
  reg signed [24:0] Delay5_out1_im;  // sfix25_En16


  assign enb = clk_enable;

  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1_re <= 12'sb000000000000;
        Delay_out1_im <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_re <= In1_re;
          Delay_out1_im <= In1_im;
        end
      end
    end


  always @(posedge clk)
    begin : reduced_process
      if (reset == 1'b1) begin
        Complex_to_Real_Imag_out1 <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Complex_to_Real_Imag_out1 <= Delay_out1_re;
        end
      end
    end



  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1_re <= 12'sb000000000000;
        Delay1_out1_im <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_re <= In2_re;
          Delay1_out1_im <= In2_im;
        end
      end
    end


  always @(posedge clk)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        Complex_to_Real_Imag1_out1 <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Complex_to_Real_Imag1_out1 <= Delay1_out1_re;
        end
      end
    end



  assign Product1_out1 = Complex_to_Real_Imag_out1 * Complex_to_Real_Imag1_out1;


  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Product1_out1_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Product1_out1_1 <= Product1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        Complex_to_Real_Imag_out2 <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Complex_to_Real_Imag_out2 <= Delay_out1_im;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_3_process
      if (reset == 1'b1) begin
        Complex_to_Real_Imag1_out2 <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Complex_to_Real_Imag1_out2 <= Delay1_out1_im;
        end
      end
    end



  assign Product_out1 = Complex_to_Real_Imag_out2 * Complex_to_Real_Imag1_out2;


  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Product_out1_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Product_out1_1 <= Product_out1;
        end
      end
    end



  assign Add_sub_cast = {Product1_out1_1[23], Product1_out1_1};
  assign Add_sub_cast_1 = {Product_out1_1[23], Product_out1_1};
  assign Add_out1 = Add_sub_cast - Add_sub_cast_1;


  always @(posedge clk)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= Add_out1;
        end
      end
    end


  assign Product2_out1 = Complex_to_Real_Imag_out1 * Complex_to_Real_Imag1_out2;


  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Product2_out1_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Product2_out1_1 <= Product2_out1;
        end
      end
    end



  assign Product3_out1 = Complex_to_Real_Imag1_out1 * Complex_to_Real_Imag_out2;


  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        Product3_out1_1 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Product3_out1_1 <= Product3_out1;
        end
      end
    end



  assign Add1_add_cast = {Product2_out1_1[23], Product2_out1_1};
  assign Add1_add_cast_1 = {Product3_out1_1[23], Product3_out1_1};
  assign Add1_out1 = Add1_add_cast + Add1_add_cast_1;


  always @(posedge clk)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Add1_out1;
        end
      end
    end


  always @(posedge clk)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1_re <= 25'sb0000000000000000000000000;
        Delay5_out1_im <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_re <= Delay9_out1;
          Delay5_out1_im <= Delay8_out1;
        end
      end
    end


  assign Out1_re = Delay5_out1_re;

  assign Out1_im = Delay5_out1_im;

  assign ce_out = clk_enable;

endmodule  // HDL_Complex_Multiplier

