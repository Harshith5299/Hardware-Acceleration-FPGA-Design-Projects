// -------------------------------------------------------------
// 
// File Name: hdl_prj_asic/hdlsrc/tutorial1_1/HDL_Complex_Multiplier_dpi_tb.sv
// Created: 2021-02-02 16:37:12
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1e-06
// Target subsystem base rate: 1e-06
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1e-06
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1_re                       ce_out        1e-06
// Out1_im                       ce_out        1e-06
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_Complex_Multiplier_dpi_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_Complex_Multiplier_dpi_tb;

  logic clk;
  logic reset;
  logic enb;
  logic const_true;
  logic snkDone;
  logic const_false;
  logic dutEnable;
  logic signed [15:0] dpi_1_re;  /* sfix16_En8 */
  logic [11:0] dpi_1_re_temp;  /* ufix12 */
  logic signed [11:0] In1_re;  /* sfix12_En8 */
  logic signed [15:0] dpi_1_im;  /* sfix16_En8 */
  logic [11:0] dpi_1_im_temp;  /* ufix12 */
  logic signed [11:0] In1_im;  /* sfix12_En8 */
  logic signed [15:0] dpi_2_re;  /* sfix16_En8 */
  logic [11:0] dpi_2_re_temp;  /* ufix12 */
  logic signed [11:0] In2_re;  /* sfix12_En8 */
  logic signed [15:0] dpi_2_im;  /* sfix16_En8 */
  logic [11:0] dpi_2_im_temp;  /* ufix12 */
  logic signed [11:0] In2_im;  /* sfix12_En8 */
  logic signed [24:0] Out1_re;  /* sfix25_En16 */
  logic signed [24:0] Out1_im;  /* sfix25_En16 */
  logic ce_out;
  logic dpiReset;
  logic dpiEnable;
  logic dpiEnbDelay;
  logic signed [31:0] dpi_3_re;  /* sfix32_En16 */
  logic signed [31:0] dpi_3_im;  /* sfix32_En16 */
  logic [24:0] dpi_3_re_temp;  /* ufix25 */
  logic signed [24:0] Out1_re_ref;  /* sfix25_En16 */
  logic Out1_re_testFailure;
  logic [24:0] dpi_3_im_temp;  /* ufix25 */
  logic signed [24:0] Out1_im_ref;  /* sfix25_En16 */
  logic Out1_im_testFailure;
  logic isTestFailed;
  logic rdEnb;


  assign const_true = 1'b1;



  assign #550 snkDone = const_true;

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (30);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  assign const_false = 1'b0;



  assign enb = (reset == 1'b0 ? const_true :
              const_false);



  // Delay inside enable generation: register depth 
  always @(posedge clk)
    begin : dut_enable_delay
      if (reset) begin
        dutEnable <= 0;
      end
      else begin
        dutEnable <= enb;
      end
    end

  assign dpi_1_re_temp = dpi_1_re[11:0];



  assign In1_re = dpi_1_re_temp;



  assign dpi_1_im_temp = dpi_1_im[11:0];



  assign In1_im = dpi_1_im_temp;



  assign dpi_2_re_temp = dpi_2_re[11:0];



  assign In2_re = dpi_2_re_temp;



  assign dpi_2_im_temp = dpi_2_im[11:0];



  assign In2_im = dpi_2_im_temp;



  HDL_Complex_Multiplier u_HDL_Complex_Multiplier (.In1_re(In1_re),  /* sfix12_En8 */
                                                   .In1_im(In1_im),  /* sfix12_En8 */
                                                   .In2_re(In2_re),  /* sfix12_En8 */
                                                   .In2_im(In2_im),  /* sfix12_En8 */
                                                   .clk(clk),
                                                   .reset(reset),
                                                   .clk_enable(dutEnable),
                                                   .Out1_re(Out1_re),  /* sfix25_En16 */
                                                   .Out1_im(Out1_im),  /* sfix25_En16 */
                                                   .ce_out(ce_out)
                                                   );

  initial
    begin : dpiReset_gen
      dpiReset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      dpiReset <= 1'b0;
    end

  assign dpiEnable = (dpiReset == 1'b0 ? const_true :
              const_false);



  // Delay inside enable generation: register depth 
  always @(posedge clk)
    begin : dut_enable_delay_1
      if (dpiReset) begin
        dpiEnbDelay <= 0;
      end
      else begin
        dpiEnbDelay <= dpiEnable;
      end
    end

  gm_tutorial1_1_ref_dpi #(.loop_factor(1),
                           .overclocking_factor(1)
                           )
                         u_gm_tutorial1_1_ref_dpi (.clk(clk),
                                                   .reset(dpiReset),
                                                   .clk_enable(dpiEnbDelay),
                                                   .dpi_1_re(dpi_1_re),  /* sfix16_En8 */
                                                   .dpi_1_im(dpi_1_im),  /* sfix16_En8 */
                                                   .dpi_2_re(dpi_2_re),  /* sfix16_En8 */
                                                   .dpi_2_im(dpi_2_im),  /* sfix16_En8 */
                                                   .dpi_3_re(dpi_3_re),  /* sfix32_En16 */
                                                   .dpi_3_im(dpi_3_im)  /* sfix32_En16 */
                                                   );

  assign dpi_3_re_temp = dpi_3_re[24:0];



  assign Out1_re_ref = dpi_3_re_temp;



  always @(posedge clk)
    begin : Out1_re_checker
      if (reset == 1'b1) begin
        Out1_re_testFailure <= 1'b0;
      end
      else begin
        if (dutEnable == 1'b1 && Out1_re !== Out1_re_ref) begin
          Out1_re_testFailure <= 1'b1;
          $display("ERROR in Out1_re at time %t : Expected '%h' Actual '%h'", $time, Out1_re_ref, Out1_re);
        end
      end
    end

  assign dpi_3_im_temp = dpi_3_im[24:0];



  assign Out1_im_ref = dpi_3_im_temp;



  always @(posedge clk)
    begin : Out1_im_checker
      if (reset == 1'b1) begin
        Out1_im_testFailure <= 1'b0;
      end
      else begin
        if (dutEnable == 1'b1 && Out1_im !== Out1_im_ref) begin
          Out1_im_testFailure <= 1'b1;
          $display("ERROR in Out1_im at time %t : Expected '%h' Actual '%h'", $time, Out1_im_ref, Out1_im);
        end
      end
    end

  assign isTestFailed = Out1_re_testFailure | Out1_im_testFailure;



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (isTestFailed == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // HDL_Complex_Multiplier_dpi_tb

